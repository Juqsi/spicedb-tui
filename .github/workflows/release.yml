name: Release

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  check:
    name: Lint, build and SonarQube scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Build
        run: go build -v ./...

      #- name: Run tests
      #  run: go test ./...

      - name: SonarQube Scan
        if: env.SONAR_TOKEN != '' && env.SONAR_HOST_URL != ''
        uses: sonarsource/sonarqube-scan-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  release:
    runs-on: ubuntu-latest
    needs: check
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install semantic-release
        run: npm install -g semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/github

      - name: Run semantic-release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: semantic-release

  build:
    name: Build binaries
    needs: release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download release version
        run: |
          git fetch --tags
          tag=$(git describe --tags --abbrev=0)
          echo "RELEASE_VERSION=${tag#v}" >> $GITHUB_ENV

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Build
        run: |
          export CGO_ENABLED=0
          export GOOS=${{ matrix.goos }}
          export GOARCH=${{ matrix.goarch }}
          out_name="spicui-${GOOS}-${GOARCH}"
          [ "${{ matrix.goos }}" = "windows" ] && out_name="${out_name}.exe"
          go build -ldflags "-X main.Version=${RELEASE_VERSION}" -o "$out_name" ./cmd

      - name: Upload binary to Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: spicui-${{ matrix.goos }}-${{ matrix.goarch }}*
          tag: ${{ env.RELEASE_VERSION }}
          overwrite: true
          file_glob: true
